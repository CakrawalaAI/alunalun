// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, display_name, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, display_name, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	Email       string
	DisplayName *string
	AvatarUrl   *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.DisplayName, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.email, u.display_name, u.avatar_url, u.created_at, u.updated_at, un.username
FROM users u
JOIN usernames un ON un.user_id = u.id
WHERE u.email = $1
`

type GetUserByEmailRow struct {
	ID          pgtype.UUID
	Email       string
	DisplayName *string
	AvatarUrl   *string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id, u.email, u.display_name, u.avatar_url, u.created_at, u.updated_at, un.username
FROM users u
JOIN usernames un ON un.user_id = u.id
WHERE u.id = $1
`

type GetUserByIDRow struct {
	ID          pgtype.UUID
	Email       string
	DisplayName *string
	AvatarUrl   *string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT u.id, u.email, u.display_name, u.avatar_url, u.created_at, u.updated_at, un.username
FROM users u
JOIN usernames un ON un.user_id = u.id
WHERE un.username = $1
`

type GetUserByUsernameRow struct {
	ID          pgtype.UUID
	Email       string
	DisplayName *string
	AvatarUrl   *string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET 
  display_name = COALESCE($2, display_name),
  avatar_url = COALESCE($3, avatar_url),
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, display_name, avatar_url, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID          pgtype.UUID
	DisplayName *string
	AvatarUrl   *string
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProfile, arg.ID, arg.DisplayName, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
