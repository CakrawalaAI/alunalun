// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: usernames.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUsername = `-- name: CheckUsername :one
SELECT COUNT(*) > 0 AS taken
FROM usernames
WHERE username = $1
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsername, username)
	var taken bool
	err := row.Scan(&taken)
	return taken, err
}

const claimUsernameForAnonymous = `-- name: ClaimUsernameForAnonymous :one
INSERT INTO usernames (username, session_id)
VALUES ($1, $2)
ON CONFLICT (username) DO NOTHING
RETURNING username, session_id
`

type ClaimUsernameForAnonymousParams struct {
	Username  string
	SessionID pgtype.UUID
}

type ClaimUsernameForAnonymousRow struct {
	Username  string
	SessionID pgtype.UUID
}

func (q *Queries) ClaimUsernameForAnonymous(ctx context.Context, arg ClaimUsernameForAnonymousParams) (ClaimUsernameForAnonymousRow, error) {
	row := q.db.QueryRow(ctx, claimUsernameForAnonymous, arg.Username, arg.SessionID)
	var i ClaimUsernameForAnonymousRow
	err := row.Scan(&i.Username, &i.SessionID)
	return i, err
}

const claimUsernameForUser = `-- name: ClaimUsernameForUser :one
INSERT INTO usernames (username, user_id)
VALUES ($1, $2)
ON CONFLICT (username) DO NOTHING
RETURNING username, user_id
`

type ClaimUsernameForUserParams struct {
	Username string
	UserID   pgtype.UUID
}

type ClaimUsernameForUserRow struct {
	Username string
	UserID   pgtype.UUID
}

func (q *Queries) ClaimUsernameForUser(ctx context.Context, arg ClaimUsernameForUserParams) (ClaimUsernameForUserRow, error) {
	row := q.db.QueryRow(ctx, claimUsernameForUser, arg.Username, arg.UserID)
	var i ClaimUsernameForUserRow
	err := row.Scan(&i.Username, &i.UserID)
	return i, err
}

const getUsernameOwner = `-- name: GetUsernameOwner :one
SELECT username, user_id, session_id
FROM usernames
WHERE username = $1
`

type GetUsernameOwnerRow struct {
	Username  string
	UserID    pgtype.UUID
	SessionID pgtype.UUID
}

func (q *Queries) GetUsernameOwner(ctx context.Context, username string) (GetUsernameOwnerRow, error) {
	row := q.db.QueryRow(ctx, getUsernameOwner, username)
	var i GetUsernameOwnerRow
	err := row.Scan(&i.Username, &i.UserID, &i.SessionID)
	return i, err
}

const migrateUsernameToUser = `-- name: MigrateUsernameToUser :exec
UPDATE usernames
SET user_id = $2, session_id = NULL
WHERE session_id = $1
`

type MigrateUsernameToUserParams struct {
	SessionID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) MigrateUsernameToUser(ctx context.Context, arg MigrateUsernameToUserParams) error {
	_, err := q.db.Exec(ctx, migrateUsernameToUser, arg.SessionID, arg.UserID)
	return err
}
