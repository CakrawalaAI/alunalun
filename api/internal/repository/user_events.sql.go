// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_events.sql

package repository

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkRateLimit = `-- name: CheckRateLimit :one
SELECT 
    COUNT(*) as total_events,
    COUNT(DISTINCT session_id) as unique_sessions,
    COUNT(DISTINCT COALESCE(fingerprint, session_id)) as unique_devices
FROM user_events
WHERE ip_address = $1
    AND created_at > $2
    AND event_type = ANY($3::text[])
`

type CheckRateLimitParams struct {
	IpAddress netip.Addr         `json:"ip_address"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Column3   []string           `json:"column_3"`
}

type CheckRateLimitRow struct {
	TotalEvents    int64 `json:"total_events"`
	UniqueSessions int64 `json:"unique_sessions"`
	UniqueDevices  int64 `json:"unique_devices"`
}

func (q *Queries) CheckRateLimit(ctx context.Context, arg *CheckRateLimitParams) (*CheckRateLimitRow, error) {
	row := q.db.QueryRow(ctx, checkRateLimit, arg.IpAddress, arg.CreatedAt, arg.Column3)
	var i CheckRateLimitRow
	err := row.Scan(&i.TotalEvents, &i.UniqueSessions, &i.UniqueDevices)
	return &i, err
}

const countRecentEventsByFingerprint = `-- name: CountRecentEventsByFingerprint :one
SELECT COUNT(*) FROM user_events
WHERE fingerprint = $1
    AND created_at > $2
    AND event_type = $3
`

type CountRecentEventsByFingerprintParams struct {
	Fingerprint *string            `json:"fingerprint"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	EventType   string             `json:"event_type"`
}

func (q *Queries) CountRecentEventsByFingerprint(ctx context.Context, arg *CountRecentEventsByFingerprintParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentEventsByFingerprint, arg.Fingerprint, arg.CreatedAt, arg.EventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentEventsByIP = `-- name: CountRecentEventsByIP :one
SELECT COUNT(*) FROM user_events
WHERE ip_address = $1
    AND created_at > $2
    AND event_type = $3
`

type CountRecentEventsByIPParams struct {
	IpAddress netip.Addr         `json:"ip_address"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	EventType string             `json:"event_type"`
}

func (q *Queries) CountRecentEventsByIP(ctx context.Context, arg *CountRecentEventsByIPParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentEventsByIP, arg.IpAddress, arg.CreatedAt, arg.EventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserEvent = `-- name: CreateUserEvent :one
INSERT INTO user_events (id, user_id, session_id, event_type, ip_address, fingerprint, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, session_id, event_type, ip_address, fingerprint, created_at
`

type CreateUserEventParams struct {
	ID          string             `json:"id"`
	UserID      *string            `json:"user_id"`
	SessionID   string             `json:"session_id"`
	EventType   string             `json:"event_type"`
	IpAddress   netip.Addr         `json:"ip_address"`
	Fingerprint *string            `json:"fingerprint"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUserEvent(ctx context.Context, arg *CreateUserEventParams) (*UserEvent, error) {
	row := q.db.QueryRow(ctx, createUserEvent,
		arg.ID,
		arg.UserID,
		arg.SessionID,
		arg.EventType,
		arg.IpAddress,
		arg.Fingerprint,
		arg.CreatedAt,
	)
	var i UserEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.EventType,
		&i.IpAddress,
		&i.Fingerprint,
		&i.CreatedAt,
	)
	return &i, err
}

const getRecentEventsBySession = `-- name: GetRecentEventsBySession :many
SELECT id, user_id, session_id, event_type, ip_address, fingerprint, created_at FROM user_events
WHERE session_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetRecentEventsBySessionParams struct {
	SessionID string `json:"session_id"`
	Limit     int32  `json:"limit"`
}

func (q *Queries) GetRecentEventsBySession(ctx context.Context, arg *GetRecentEventsBySessionParams) ([]*UserEvent, error) {
	rows, err := q.db.Query(ctx, getRecentEventsBySession, arg.SessionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UserEvent{}
	for rows.Next() {
		var i UserEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionID,
			&i.EventType,
			&i.IpAddress,
			&i.Fingerprint,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentEventsByUser = `-- name: GetRecentEventsByUser :many
SELECT id, user_id, session_id, event_type, ip_address, fingerprint, created_at FROM user_events
WHERE user_id = $1
    AND created_at > $2
ORDER BY created_at DESC
`

type GetRecentEventsByUserParams struct {
	UserID    *string            `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetRecentEventsByUser(ctx context.Context, arg *GetRecentEventsByUserParams) ([]*UserEvent, error) {
	rows, err := q.db.Query(ctx, getRecentEventsByUser, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UserEvent{}
	for rows.Next() {
		var i UserEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionID,
			&i.EventType,
			&i.IpAddress,
			&i.Fingerprint,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuspiciousActivity = `-- name: GetSuspiciousActivity :many
SELECT 
    ip_address,
    COUNT(*) as event_count,
    COUNT(DISTINCT session_id) as session_count,
    COUNT(DISTINCT user_id) as user_count,
    array_agg(DISTINCT event_type) as event_types
FROM user_events
WHERE created_at > $1
GROUP BY ip_address
HAVING COUNT(*) > $2
ORDER BY event_count DESC
LIMIT $3
`

type GetSuspiciousActivityParams struct {
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Column2   interface{}        `json:"column_2"`
	Limit     int32              `json:"limit"`
}

type GetSuspiciousActivityRow struct {
	IpAddress    netip.Addr  `json:"ip_address"`
	EventCount   int64       `json:"event_count"`
	SessionCount int64       `json:"session_count"`
	UserCount    int64       `json:"user_count"`
	EventTypes   interface{} `json:"event_types"`
}

func (q *Queries) GetSuspiciousActivity(ctx context.Context, arg *GetSuspiciousActivityParams) ([]*GetSuspiciousActivityRow, error) {
	rows, err := q.db.Query(ctx, getSuspiciousActivity, arg.CreatedAt, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetSuspiciousActivityRow{}
	for rows.Next() {
		var i GetSuspiciousActivityRow
		if err := rows.Scan(
			&i.IpAddress,
			&i.EventCount,
			&i.SessionCount,
			&i.UserCount,
			&i.EventTypes,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
