// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth_providers.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUserAuthProviders = `-- name: CountUserAuthProviders :one
SELECT COUNT(*) FROM user_auth_providers WHERE user_id = $1
`

func (q *Queries) CountUserAuthProviders(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserAuthProviders, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserAuthProvider = `-- name: CreateUserAuthProvider :one
INSERT INTO user_auth_providers (id, user_id, provider, provider_user_id, provider_metadata, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, provider, provider_user_id, provider_metadata, created_at
`

type CreateUserAuthProviderParams struct {
	ID               pgtype.UUID        `json:"id"`
	UserID           pgtype.UUID        `json:"user_id"`
	Provider         string             `json:"provider"`
	ProviderUserID   string             `json:"provider_user_id"`
	ProviderMetadata []byte             `json:"provider_metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUserAuthProvider(ctx context.Context, arg *CreateUserAuthProviderParams) (*UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, createUserAuthProvider,
		arg.ID,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.ProviderMetadata,
		arg.CreatedAt,
	)
	var i UserAuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderMetadata,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteUserAuthProvider = `-- name: DeleteUserAuthProvider :exec
DELETE FROM user_auth_providers WHERE id = $1
`

func (q *Queries) DeleteUserAuthProvider(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserAuthProvider, id)
	return err
}

const getUserAuthProviderByID = `-- name: GetUserAuthProviderByID :one
SELECT id, user_id, provider, provider_user_id, provider_metadata, created_at FROM user_auth_providers WHERE id = $1
`

func (q *Queries) GetUserAuthProviderByID(ctx context.Context, id pgtype.UUID) (*UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, getUserAuthProviderByID, id)
	var i UserAuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderMetadata,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserAuthProviderByProviderID = `-- name: GetUserAuthProviderByProviderID :one
SELECT id, user_id, provider, provider_user_id, provider_metadata, created_at FROM user_auth_providers 
WHERE provider = $1 AND provider_user_id = $2
`

type GetUserAuthProviderByProviderIDParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetUserAuthProviderByProviderID(ctx context.Context, arg *GetUserAuthProviderByProviderIDParams) (*UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, getUserAuthProviderByProviderID, arg.Provider, arg.ProviderUserID)
	var i UserAuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.ProviderMetadata,
		&i.CreatedAt,
	)
	return &i, err
}

const listUserAuthProviders = `-- name: ListUserAuthProviders :many
SELECT id, user_id, provider, provider_user_id, provider_metadata, created_at FROM user_auth_providers
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserAuthProviders(ctx context.Context, userID pgtype.UUID) ([]*UserAuthProvider, error) {
	rows, err := q.db.Query(ctx, listUserAuthProviders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UserAuthProvider{}
	for rows.Next() {
		var i UserAuthProvider
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.ProviderMetadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
