// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCommentsByParent = `-- name: CountCommentsByParent :one
SELECT COUNT(*) FROM posts 
WHERE parent_id = $1 AND type = 'comment'
`

func (q *Queries) CountCommentsByParent(ctx context.Context, parentID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCommentsByParent, parentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPostsByUser = `-- name: CountPostsByUser :one
SELECT COUNT(*) FROM posts WHERE user_id = $1
`

func (q *Queries) CountPostsByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPostsByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, user_id, type, parent_id, content, visibility, metadata, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, type, parent_id, content, visibility, metadata, created_at
`

type CreatePostParams struct {
	ID         pgtype.UUID        `json:"id"`
	UserID     pgtype.UUID        `json:"user_id"`
	Type       string             `json:"type"`
	ParentID   pgtype.UUID        `json:"parent_id"`
	Content    string             `json:"content"`
	Visibility *string            `json:"visibility"`
	Metadata   []byte             `json:"metadata"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg *CreatePostParams) (*Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.ParentID,
		arg.Content,
		arg.Visibility,
		arg.Metadata,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ParentID,
		&i.Content,
		&i.Visibility,
		&i.Metadata,
		&i.CreatedAt,
	)
	return &i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, user_id, type, parent_id, content, visibility, metadata, created_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (*Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ParentID,
		&i.Content,
		&i.Visibility,
		&i.Metadata,
		&i.CreatedAt,
	)
	return &i, err
}

const getPostWithAuthor = `-- name: GetPostWithAuthor :one
SELECT 
    p.id, p.user_id, p.type, p.parent_id, p.content, p.visibility, p.metadata, p.created_at,
    u.id as author_id,
    u.username as author_username,
    u.display_name as author_display_name,
    u.avatar_url as author_avatar_url
FROM posts p
LEFT JOIN users u ON p.user_id = u.id
WHERE p.id = $1
`

type GetPostWithAuthorRow struct {
	ID                pgtype.UUID        `json:"id"`
	UserID            pgtype.UUID        `json:"user_id"`
	Type              string             `json:"type"`
	ParentID          pgtype.UUID        `json:"parent_id"`
	Content           string             `json:"content"`
	Visibility        *string            `json:"visibility"`
	Metadata          []byte             `json:"metadata"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	AuthorID          pgtype.UUID        `json:"author_id"`
	AuthorUsername    *string            `json:"author_username"`
	AuthorDisplayName *string            `json:"author_display_name"`
	AuthorAvatarUrl   *string            `json:"author_avatar_url"`
}

func (q *Queries) GetPostWithAuthor(ctx context.Context, id pgtype.UUID) (*GetPostWithAuthorRow, error) {
	row := q.db.QueryRow(ctx, getPostWithAuthor, id)
	var i GetPostWithAuthorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ParentID,
		&i.Content,
		&i.Visibility,
		&i.Metadata,
		&i.CreatedAt,
		&i.AuthorID,
		&i.AuthorUsername,
		&i.AuthorDisplayName,
		&i.AuthorAvatarUrl,
	)
	return &i, err
}

const listCommentsByParent = `-- name: ListCommentsByParent :many
SELECT 
    p.id, p.user_id, p.type, p.parent_id, p.content, p.visibility, p.metadata, p.created_at,
    u.username as author_username,
    u.display_name as author_display_name,
    u.avatar_url as author_avatar_url
FROM posts p
LEFT JOIN users u ON p.user_id = u.id
WHERE p.parent_id = $1 AND p.type = 'comment'
ORDER BY p.created_at ASC
LIMIT $2 OFFSET $3
`

type ListCommentsByParentParams struct {
	ParentID pgtype.UUID `json:"parent_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type ListCommentsByParentRow struct {
	ID                pgtype.UUID        `json:"id"`
	UserID            pgtype.UUID        `json:"user_id"`
	Type              string             `json:"type"`
	ParentID          pgtype.UUID        `json:"parent_id"`
	Content           string             `json:"content"`
	Visibility        *string            `json:"visibility"`
	Metadata          []byte             `json:"metadata"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	AuthorUsername    *string            `json:"author_username"`
	AuthorDisplayName *string            `json:"author_display_name"`
	AuthorAvatarUrl   *string            `json:"author_avatar_url"`
}

func (q *Queries) ListCommentsByParent(ctx context.Context, arg *ListCommentsByParentParams) ([]*ListCommentsByParentRow, error) {
	rows, err := q.db.Query(ctx, listCommentsByParent, arg.ParentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListCommentsByParentRow{}
	for rows.Next() {
		var i ListCommentsByParentRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.ParentID,
			&i.Content,
			&i.Visibility,
			&i.Metadata,
			&i.CreatedAt,
			&i.AuthorUsername,
			&i.AuthorDisplayName,
			&i.AuthorAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByType = `-- name: ListPostsByType :many
SELECT id, user_id, type, parent_id, content, visibility, metadata, created_at FROM posts
WHERE type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByTypeParams struct {
	Type   string `json:"type"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListPostsByType(ctx context.Context, arg *ListPostsByTypeParams) ([]*Post, error) {
	rows, err := q.db.Query(ctx, listPostsByType, arg.Type, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.ParentID,
			&i.Content,
			&i.Visibility,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
SELECT id, user_id, type, parent_id, content, visibility, metadata, created_at FROM posts 
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListPostsByUser(ctx context.Context, arg *ListPostsByUserParams) ([]*Post, error) {
	rows, err := q.db.Query(ctx, listPostsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.ParentID,
			&i.Content,
			&i.Visibility,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentPins = `-- name: ListRecentPins :many
SELECT 
    p.id, p.user_id, p.type, p.parent_id, p.content, p.visibility, p.metadata, p.created_at,
    u.username as author_username,
    u.display_name as author_display_name,
    u.avatar_url as author_avatar_url
FROM posts p
LEFT JOIN users u ON p.user_id = u.id
WHERE p.type = 'pin' 
    AND p.created_at > NOW() - INTERVAL '24 hours'
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentPinsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListRecentPinsRow struct {
	ID                pgtype.UUID        `json:"id"`
	UserID            pgtype.UUID        `json:"user_id"`
	Type              string             `json:"type"`
	ParentID          pgtype.UUID        `json:"parent_id"`
	Content           string             `json:"content"`
	Visibility        *string            `json:"visibility"`
	Metadata          []byte             `json:"metadata"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	AuthorUsername    *string            `json:"author_username"`
	AuthorDisplayName *string            `json:"author_display_name"`
	AuthorAvatarUrl   *string            `json:"author_avatar_url"`
}

func (q *Queries) ListRecentPins(ctx context.Context, arg *ListRecentPinsParams) ([]*ListRecentPinsRow, error) {
	rows, err := q.db.Query(ctx, listRecentPins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListRecentPinsRow{}
	for rows.Next() {
		var i ListRecentPinsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.ParentID,
			&i.Content,
			&i.Visibility,
			&i.Metadata,
			&i.CreatedAt,
			&i.AuthorUsername,
			&i.AuthorDisplayName,
			&i.AuthorAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET 
    content = $2,
    visibility = $3,
    metadata = $4
WHERE id = $1
RETURNING id, user_id, type, parent_id, content, visibility, metadata, created_at
`

type UpdatePostParams struct {
	ID         pgtype.UUID `json:"id"`
	Content    string      `json:"content"`
	Visibility *string     `json:"visibility"`
	Metadata   []byte      `json:"metadata"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg *UpdatePostParams) (*Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Content,
		arg.Visibility,
		arg.Metadata,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ParentID,
		&i.Content,
		&i.Visibility,
		&i.Metadata,
		&i.CreatedAt,
	)
	return &i, err
}
