// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthProvider = `-- name: CreateAuthProvider :one
INSERT INTO user_auth_providers (
    user_id, provider, provider_user_id, email_verified, is_primary
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, provider, provider_user_id, email_verified, is_primary, created_at, last_used_at
`

type CreateAuthProviderParams struct {
	UserID         pgtype.UUID
	Provider       string
	ProviderUserID string
	EmailVerified  *bool
	IsPrimary      *bool
}

func (q *Queries) CreateAuthProvider(ctx context.Context, arg CreateAuthProviderParams) (UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, createAuthProvider,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.EmailVerified,
		arg.IsPrimary,
	)
	var i UserAuthProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.EmailVerified,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getAuthProvidersByUserID = `-- name: GetAuthProvidersByUserID :many
SELECT id, user_id, provider, provider_user_id, email_verified, is_primary, created_at, last_used_at FROM user_auth_providers 
WHERE user_id = $1 
ORDER BY is_primary DESC, created_at ASC
`

func (q *Queries) GetAuthProvidersByUserID(ctx context.Context, userID pgtype.UUID) ([]UserAuthProvider, error) {
	rows, err := q.db.Query(ctx, getAuthProvidersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAuthProvider{}
	for rows.Next() {
		var i UserAuthProvider
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.EmailVerified,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAuthProvider = `-- name: GetUserByAuthProvider :one
SELECT u.id, u.email, u.display_name, u.avatar_url, u.created_at, u.updated_at, un.username FROM users u
JOIN user_auth_providers uap ON u.id = uap.user_id
JOIN usernames un ON un.user_id = u.id
WHERE uap.provider = $1 AND uap.provider_user_id = $2
`

type GetUserByAuthProviderParams struct {
	Provider       string
	ProviderUserID string
}

type GetUserByAuthProviderRow struct {
	ID          pgtype.UUID
	Email       string
	DisplayName *string
	AvatarUrl   *string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
}

func (q *Queries) GetUserByAuthProvider(ctx context.Context, arg GetUserByAuthProviderParams) (GetUserByAuthProviderRow, error) {
	row := q.db.QueryRow(ctx, getUserByAuthProvider, arg.Provider, arg.ProviderUserID)
	var i GetUserByAuthProviderRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const unlinkAuthProvider = `-- name: UnlinkAuthProvider :exec
DELETE FROM user_auth_providers 
WHERE user_id = $1 AND provider = $2 
AND NOT is_primary
`

type UnlinkAuthProviderParams struct {
	UserID   pgtype.UUID
	Provider string
}

func (q *Queries) UnlinkAuthProvider(ctx context.Context, arg UnlinkAuthProviderParams) error {
	_, err := q.db.Exec(ctx, unlinkAuthProvider, arg.UserID, arg.Provider)
	return err
}

const updateAuthProviderLastUsed = `-- name: UpdateAuthProviderLastUsed :exec
UPDATE user_auth_providers 
SET last_used_at = NOW() 
WHERE id = $1
`

func (q *Queries) UpdateAuthProviderLastUsed(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateAuthProviderLastUsed, id)
	return err
}
