// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/service/user.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/ckrwl/alunalun/api/gen/api/v1/service"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.v1.service.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetCurrentUserProcedure is the fully-qualified name of the UserService's
	// GetCurrentUser RPC.
	UserServiceGetCurrentUserProcedure = "/api.v1.service.UserService/GetCurrentUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/api.v1.service.UserService/GetUser"
	// UserServiceUpdateProfileProcedure is the fully-qualified name of the UserService's UpdateProfile
	// RPC.
	UserServiceUpdateProfileProcedure = "/api.v1.service.UserService/UpdateProfile"
	// UserServiceGetAuthProvidersProcedure is the fully-qualified name of the UserService's
	// GetAuthProviders RPC.
	UserServiceGetAuthProvidersProcedure = "/api.v1.service.UserService/GetAuthProviders"
	// UserServiceLinkAuthProviderProcedure is the fully-qualified name of the UserService's
	// LinkAuthProvider RPC.
	UserServiceLinkAuthProviderProcedure = "/api.v1.service.UserService/LinkAuthProvider"
	// UserServiceUnlinkAuthProviderProcedure is the fully-qualified name of the UserService's
	// UnlinkAuthProvider RPC.
	UserServiceUnlinkAuthProviderProcedure = "/api.v1.service.UserService/UnlinkAuthProvider"
)

// UserServiceClient is a client for the api.v1.service.UserService service.
type UserServiceClient interface {
	// Get current user profile
	GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetCurrentUserResponse], error)
	// Get user by username
	GetUser(context.Context, *connect.Request[service.GetUserRequest]) (*connect.Response[service.GetUserResponse], error)
	// Update current user profile
	UpdateProfile(context.Context, *connect.Request[service.UpdateProfileRequest]) (*connect.Response[service.UpdateProfileResponse], error)
	// Get linked auth providers
	GetAuthProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetAuthProvidersResponse], error)
	// Link new auth provider
	LinkAuthProvider(context.Context, *connect.Request[service.LinkAuthProviderRequest]) (*connect.Response[service.LinkAuthProviderResponse], error)
	// Unlink auth provider
	UnlinkAuthProvider(context.Context, *connect.Request[service.UnlinkAuthProviderRequest]) (*connect.Response[service.UnlinkAuthProviderResponse], error)
}

// NewUserServiceClient constructs a client for the api.v1.service.UserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := service.File_v1_service_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getCurrentUser: connect.NewClient[emptypb.Empty, service.GetCurrentUserResponse](
			httpClient,
			baseURL+UserServiceGetCurrentUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[service.GetUserRequest, service.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateProfile: connect.NewClient[service.UpdateProfileRequest, service.UpdateProfileResponse](
			httpClient,
			baseURL+UserServiceUpdateProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateProfile")),
			connect.WithClientOptions(opts...),
		),
		getAuthProviders: connect.NewClient[emptypb.Empty, service.GetAuthProvidersResponse](
			httpClient,
			baseURL+UserServiceGetAuthProvidersProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetAuthProviders")),
			connect.WithClientOptions(opts...),
		),
		linkAuthProvider: connect.NewClient[service.LinkAuthProviderRequest, service.LinkAuthProviderResponse](
			httpClient,
			baseURL+UserServiceLinkAuthProviderProcedure,
			connect.WithSchema(userServiceMethods.ByName("LinkAuthProvider")),
			connect.WithClientOptions(opts...),
		),
		unlinkAuthProvider: connect.NewClient[service.UnlinkAuthProviderRequest, service.UnlinkAuthProviderResponse](
			httpClient,
			baseURL+UserServiceUnlinkAuthProviderProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnlinkAuthProvider")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getCurrentUser     *connect.Client[emptypb.Empty, service.GetCurrentUserResponse]
	getUser            *connect.Client[service.GetUserRequest, service.GetUserResponse]
	updateProfile      *connect.Client[service.UpdateProfileRequest, service.UpdateProfileResponse]
	getAuthProviders   *connect.Client[emptypb.Empty, service.GetAuthProvidersResponse]
	linkAuthProvider   *connect.Client[service.LinkAuthProviderRequest, service.LinkAuthProviderResponse]
	unlinkAuthProvider *connect.Client[service.UnlinkAuthProviderRequest, service.UnlinkAuthProviderResponse]
}

// GetCurrentUser calls api.v1.service.UserService.GetCurrentUser.
func (c *userServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[service.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// GetUser calls api.v1.service.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[service.GetUserRequest]) (*connect.Response[service.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateProfile calls api.v1.service.UserService.UpdateProfile.
func (c *userServiceClient) UpdateProfile(ctx context.Context, req *connect.Request[service.UpdateProfileRequest]) (*connect.Response[service.UpdateProfileResponse], error) {
	return c.updateProfile.CallUnary(ctx, req)
}

// GetAuthProviders calls api.v1.service.UserService.GetAuthProviders.
func (c *userServiceClient) GetAuthProviders(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[service.GetAuthProvidersResponse], error) {
	return c.getAuthProviders.CallUnary(ctx, req)
}

// LinkAuthProvider calls api.v1.service.UserService.LinkAuthProvider.
func (c *userServiceClient) LinkAuthProvider(ctx context.Context, req *connect.Request[service.LinkAuthProviderRequest]) (*connect.Response[service.LinkAuthProviderResponse], error) {
	return c.linkAuthProvider.CallUnary(ctx, req)
}

// UnlinkAuthProvider calls api.v1.service.UserService.UnlinkAuthProvider.
func (c *userServiceClient) UnlinkAuthProvider(ctx context.Context, req *connect.Request[service.UnlinkAuthProviderRequest]) (*connect.Response[service.UnlinkAuthProviderResponse], error) {
	return c.unlinkAuthProvider.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.v1.service.UserService service.
type UserServiceHandler interface {
	// Get current user profile
	GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetCurrentUserResponse], error)
	// Get user by username
	GetUser(context.Context, *connect.Request[service.GetUserRequest]) (*connect.Response[service.GetUserResponse], error)
	// Update current user profile
	UpdateProfile(context.Context, *connect.Request[service.UpdateProfileRequest]) (*connect.Response[service.UpdateProfileResponse], error)
	// Get linked auth providers
	GetAuthProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetAuthProvidersResponse], error)
	// Link new auth provider
	LinkAuthProvider(context.Context, *connect.Request[service.LinkAuthProviderRequest]) (*connect.Response[service.LinkAuthProviderResponse], error)
	// Unlink auth provider
	UnlinkAuthProvider(context.Context, *connect.Request[service.UnlinkAuthProviderRequest]) (*connect.Response[service.UnlinkAuthProviderResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := service.File_v1_service_user_proto.Services().ByName("UserService").Methods()
	userServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		UserServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateProfileHandler := connect.NewUnaryHandler(
		UserServiceUpdateProfileProcedure,
		svc.UpdateProfile,
		connect.WithSchema(userServiceMethods.ByName("UpdateProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetAuthProvidersHandler := connect.NewUnaryHandler(
		UserServiceGetAuthProvidersProcedure,
		svc.GetAuthProviders,
		connect.WithSchema(userServiceMethods.ByName("GetAuthProviders")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLinkAuthProviderHandler := connect.NewUnaryHandler(
		UserServiceLinkAuthProviderProcedure,
		svc.LinkAuthProvider,
		connect.WithSchema(userServiceMethods.ByName("LinkAuthProvider")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnlinkAuthProviderHandler := connect.NewUnaryHandler(
		UserServiceUnlinkAuthProviderProcedure,
		svc.UnlinkAuthProvider,
		connect.WithSchema(userServiceMethods.ByName("UnlinkAuthProvider")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.service.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetCurrentUserProcedure:
			userServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateProfileProcedure:
			userServiceUpdateProfileHandler.ServeHTTP(w, r)
		case UserServiceGetAuthProvidersProcedure:
			userServiceGetAuthProvidersHandler.ServeHTTP(w, r)
		case UserServiceLinkAuthProviderProcedure:
			userServiceLinkAuthProviderHandler.ServeHTTP(w, r)
		case UserServiceUnlinkAuthProviderProcedure:
			userServiceUnlinkAuthProviderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.GetCurrentUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[service.GetUserRequest]) (*connect.Response[service.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateProfile(context.Context, *connect.Request[service.UpdateProfileRequest]) (*connect.Response[service.UpdateProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.UpdateProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) GetAuthProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[service.GetAuthProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.GetAuthProviders is not implemented"))
}

func (UnimplementedUserServiceHandler) LinkAuthProvider(context.Context, *connect.Request[service.LinkAuthProviderRequest]) (*connect.Response[service.LinkAuthProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.LinkAuthProvider is not implemented"))
}

func (UnimplementedUserServiceHandler) UnlinkAuthProvider(context.Context, *connect.Request[service.UnlinkAuthProviderRequest]) (*connect.Response[service.UnlinkAuthProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.UserService.UnlinkAuthProvider is not implemented"))
}
