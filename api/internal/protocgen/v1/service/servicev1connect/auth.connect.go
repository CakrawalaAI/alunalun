// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/service/auth.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/ckrwl/alunalun/api/gen/api/v1/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "api.v1.service.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceCheckUsernameProcedure is the fully-qualified name of the AuthService's CheckUsername
	// RPC.
	AuthServiceCheckUsernameProcedure = "/api.v1.service.AuthService/CheckUsername"
	// AuthServiceInitAnonymousProcedure is the fully-qualified name of the AuthService's InitAnonymous
	// RPC.
	AuthServiceInitAnonymousProcedure = "/api.v1.service.AuthService/InitAnonymous"
	// AuthServiceAuthenticateProcedure is the fully-qualified name of the AuthService's Authenticate
	// RPC.
	AuthServiceAuthenticateProcedure = "/api.v1.service.AuthService/Authenticate"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/api.v1.service.AuthService/RefreshToken"
)

// AuthServiceClient is a client for the api.v1.service.AuthService service.
type AuthServiceClient interface {
	// Check if username is available
	CheckUsername(context.Context, *connect.Request[service.CheckUsernameRequest]) (*connect.Response[service.CheckUsernameResponse], error)
	// Initialize anonymous session (generates session_id + token)
	InitAnonymous(context.Context, *connect.Request[service.InitAnonymousRequest]) (*connect.Response[service.InitAnonymousResponse], error)
	// Authenticate with provider (Google, magic link, etc)
	Authenticate(context.Context, *connect.Request[service.AuthenticateRequest]) (*connect.Response[service.AuthenticateResponse], error)
	// Refresh authenticated tokens (anonymous tokens never expire)
	RefreshToken(context.Context, *connect.Request[service.RefreshTokenRequest]) (*connect.Response[service.RefreshTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the api.v1.service.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := service.File_v1_service_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		checkUsername: connect.NewClient[service.CheckUsernameRequest, service.CheckUsernameResponse](
			httpClient,
			baseURL+AuthServiceCheckUsernameProcedure,
			connect.WithSchema(authServiceMethods.ByName("CheckUsername")),
			connect.WithClientOptions(opts...),
		),
		initAnonymous: connect.NewClient[service.InitAnonymousRequest, service.InitAnonymousResponse](
			httpClient,
			baseURL+AuthServiceInitAnonymousProcedure,
			connect.WithSchema(authServiceMethods.ByName("InitAnonymous")),
			connect.WithClientOptions(opts...),
		),
		authenticate: connect.NewClient[service.AuthenticateRequest, service.AuthenticateResponse](
			httpClient,
			baseURL+AuthServiceAuthenticateProcedure,
			connect.WithSchema(authServiceMethods.ByName("Authenticate")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[service.RefreshTokenRequest, service.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	checkUsername *connect.Client[service.CheckUsernameRequest, service.CheckUsernameResponse]
	initAnonymous *connect.Client[service.InitAnonymousRequest, service.InitAnonymousResponse]
	authenticate  *connect.Client[service.AuthenticateRequest, service.AuthenticateResponse]
	refreshToken  *connect.Client[service.RefreshTokenRequest, service.RefreshTokenResponse]
}

// CheckUsername calls api.v1.service.AuthService.CheckUsername.
func (c *authServiceClient) CheckUsername(ctx context.Context, req *connect.Request[service.CheckUsernameRequest]) (*connect.Response[service.CheckUsernameResponse], error) {
	return c.checkUsername.CallUnary(ctx, req)
}

// InitAnonymous calls api.v1.service.AuthService.InitAnonymous.
func (c *authServiceClient) InitAnonymous(ctx context.Context, req *connect.Request[service.InitAnonymousRequest]) (*connect.Response[service.InitAnonymousResponse], error) {
	return c.initAnonymous.CallUnary(ctx, req)
}

// Authenticate calls api.v1.service.AuthService.Authenticate.
func (c *authServiceClient) Authenticate(ctx context.Context, req *connect.Request[service.AuthenticateRequest]) (*connect.Response[service.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// RefreshToken calls api.v1.service.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[service.RefreshTokenRequest]) (*connect.Response[service.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the api.v1.service.AuthService service.
type AuthServiceHandler interface {
	// Check if username is available
	CheckUsername(context.Context, *connect.Request[service.CheckUsernameRequest]) (*connect.Response[service.CheckUsernameResponse], error)
	// Initialize anonymous session (generates session_id + token)
	InitAnonymous(context.Context, *connect.Request[service.InitAnonymousRequest]) (*connect.Response[service.InitAnonymousResponse], error)
	// Authenticate with provider (Google, magic link, etc)
	Authenticate(context.Context, *connect.Request[service.AuthenticateRequest]) (*connect.Response[service.AuthenticateResponse], error)
	// Refresh authenticated tokens (anonymous tokens never expire)
	RefreshToken(context.Context, *connect.Request[service.RefreshTokenRequest]) (*connect.Response[service.RefreshTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := service.File_v1_service_auth_proto.Services().ByName("AuthService").Methods()
	authServiceCheckUsernameHandler := connect.NewUnaryHandler(
		AuthServiceCheckUsernameProcedure,
		svc.CheckUsername,
		connect.WithSchema(authServiceMethods.ByName("CheckUsername")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceInitAnonymousHandler := connect.NewUnaryHandler(
		AuthServiceInitAnonymousProcedure,
		svc.InitAnonymous,
		connect.WithSchema(authServiceMethods.ByName("InitAnonymous")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAuthenticateHandler := connect.NewUnaryHandler(
		AuthServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(authServiceMethods.ByName("Authenticate")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.service.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceCheckUsernameProcedure:
			authServiceCheckUsernameHandler.ServeHTTP(w, r)
		case AuthServiceInitAnonymousProcedure:
			authServiceInitAnonymousHandler.ServeHTTP(w, r)
		case AuthServiceAuthenticateProcedure:
			authServiceAuthenticateHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) CheckUsername(context.Context, *connect.Request[service.CheckUsernameRequest]) (*connect.Response[service.CheckUsernameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.AuthService.CheckUsername is not implemented"))
}

func (UnimplementedAuthServiceHandler) InitAnonymous(context.Context, *connect.Request[service.InitAnonymousRequest]) (*connect.Response[service.InitAnonymousResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.AuthService.InitAnonymous is not implemented"))
}

func (UnimplementedAuthServiceHandler) Authenticate(context.Context, *connect.Request[service.AuthenticateRequest]) (*connect.Response[service.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.AuthService.Authenticate is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[service.RefreshTokenRequest]) (*connect.Response[service.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.AuthService.RefreshToken is not implemented"))
}
