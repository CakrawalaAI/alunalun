// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/service/pin_service.proto

package servicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	service "github.com/radjathaher/alunalun/api/internal/protocgen/v1/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PinServiceName is the fully-qualified name of the PinService service.
	PinServiceName = "api.v1.service.PinService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PinServiceCreatePinProcedure is the fully-qualified name of the PinService's CreatePin RPC.
	PinServiceCreatePinProcedure = "/api.v1.service.PinService/CreatePin"
	// PinServiceListPinsProcedure is the fully-qualified name of the PinService's ListPins RPC.
	PinServiceListPinsProcedure = "/api.v1.service.PinService/ListPins"
	// PinServiceGetPinProcedure is the fully-qualified name of the PinService's GetPin RPC.
	PinServiceGetPinProcedure = "/api.v1.service.PinService/GetPin"
	// PinServiceAddCommentProcedure is the fully-qualified name of the PinService's AddComment RPC.
	PinServiceAddCommentProcedure = "/api.v1.service.PinService/AddComment"
)

// PinServiceClient is a client for the api.v1.service.PinService service.
type PinServiceClient interface {
	// Create a new pin on the map
	CreatePin(context.Context, *connect.Request[service.CreatePinRequest]) (*connect.Response[service.CreatePinResponse], error)
	// Get pins within a geographic area
	ListPins(context.Context, *connect.Request[service.ListPinsRequest]) (*connect.Response[service.ListPinsResponse], error)
	// Get a single pin with its comments
	GetPin(context.Context, *connect.Request[service.GetPinRequest]) (*connect.Response[service.GetPinResponse], error)
	// Add a comment to a pin
	AddComment(context.Context, *connect.Request[service.AddCommentRequest]) (*connect.Response[service.AddCommentResponse], error)
}

// NewPinServiceClient constructs a client for the api.v1.service.PinService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPinServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PinServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pinServiceMethods := service.File_v1_service_pin_service_proto.Services().ByName("PinService").Methods()
	return &pinServiceClient{
		createPin: connect.NewClient[service.CreatePinRequest, service.CreatePinResponse](
			httpClient,
			baseURL+PinServiceCreatePinProcedure,
			connect.WithSchema(pinServiceMethods.ByName("CreatePin")),
			connect.WithClientOptions(opts...),
		),
		listPins: connect.NewClient[service.ListPinsRequest, service.ListPinsResponse](
			httpClient,
			baseURL+PinServiceListPinsProcedure,
			connect.WithSchema(pinServiceMethods.ByName("ListPins")),
			connect.WithClientOptions(opts...),
		),
		getPin: connect.NewClient[service.GetPinRequest, service.GetPinResponse](
			httpClient,
			baseURL+PinServiceGetPinProcedure,
			connect.WithSchema(pinServiceMethods.ByName("GetPin")),
			connect.WithClientOptions(opts...),
		),
		addComment: connect.NewClient[service.AddCommentRequest, service.AddCommentResponse](
			httpClient,
			baseURL+PinServiceAddCommentProcedure,
			connect.WithSchema(pinServiceMethods.ByName("AddComment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pinServiceClient implements PinServiceClient.
type pinServiceClient struct {
	createPin  *connect.Client[service.CreatePinRequest, service.CreatePinResponse]
	listPins   *connect.Client[service.ListPinsRequest, service.ListPinsResponse]
	getPin     *connect.Client[service.GetPinRequest, service.GetPinResponse]
	addComment *connect.Client[service.AddCommentRequest, service.AddCommentResponse]
}

// CreatePin calls api.v1.service.PinService.CreatePin.
func (c *pinServiceClient) CreatePin(ctx context.Context, req *connect.Request[service.CreatePinRequest]) (*connect.Response[service.CreatePinResponse], error) {
	return c.createPin.CallUnary(ctx, req)
}

// ListPins calls api.v1.service.PinService.ListPins.
func (c *pinServiceClient) ListPins(ctx context.Context, req *connect.Request[service.ListPinsRequest]) (*connect.Response[service.ListPinsResponse], error) {
	return c.listPins.CallUnary(ctx, req)
}

// GetPin calls api.v1.service.PinService.GetPin.
func (c *pinServiceClient) GetPin(ctx context.Context, req *connect.Request[service.GetPinRequest]) (*connect.Response[service.GetPinResponse], error) {
	return c.getPin.CallUnary(ctx, req)
}

// AddComment calls api.v1.service.PinService.AddComment.
func (c *pinServiceClient) AddComment(ctx context.Context, req *connect.Request[service.AddCommentRequest]) (*connect.Response[service.AddCommentResponse], error) {
	return c.addComment.CallUnary(ctx, req)
}

// PinServiceHandler is an implementation of the api.v1.service.PinService service.
type PinServiceHandler interface {
	// Create a new pin on the map
	CreatePin(context.Context, *connect.Request[service.CreatePinRequest]) (*connect.Response[service.CreatePinResponse], error)
	// Get pins within a geographic area
	ListPins(context.Context, *connect.Request[service.ListPinsRequest]) (*connect.Response[service.ListPinsResponse], error)
	// Get a single pin with its comments
	GetPin(context.Context, *connect.Request[service.GetPinRequest]) (*connect.Response[service.GetPinResponse], error)
	// Add a comment to a pin
	AddComment(context.Context, *connect.Request[service.AddCommentRequest]) (*connect.Response[service.AddCommentResponse], error)
}

// NewPinServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPinServiceHandler(svc PinServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pinServiceMethods := service.File_v1_service_pin_service_proto.Services().ByName("PinService").Methods()
	pinServiceCreatePinHandler := connect.NewUnaryHandler(
		PinServiceCreatePinProcedure,
		svc.CreatePin,
		connect.WithSchema(pinServiceMethods.ByName("CreatePin")),
		connect.WithHandlerOptions(opts...),
	)
	pinServiceListPinsHandler := connect.NewUnaryHandler(
		PinServiceListPinsProcedure,
		svc.ListPins,
		connect.WithSchema(pinServiceMethods.ByName("ListPins")),
		connect.WithHandlerOptions(opts...),
	)
	pinServiceGetPinHandler := connect.NewUnaryHandler(
		PinServiceGetPinProcedure,
		svc.GetPin,
		connect.WithSchema(pinServiceMethods.ByName("GetPin")),
		connect.WithHandlerOptions(opts...),
	)
	pinServiceAddCommentHandler := connect.NewUnaryHandler(
		PinServiceAddCommentProcedure,
		svc.AddComment,
		connect.WithSchema(pinServiceMethods.ByName("AddComment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.service.PinService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PinServiceCreatePinProcedure:
			pinServiceCreatePinHandler.ServeHTTP(w, r)
		case PinServiceListPinsProcedure:
			pinServiceListPinsHandler.ServeHTTP(w, r)
		case PinServiceGetPinProcedure:
			pinServiceGetPinHandler.ServeHTTP(w, r)
		case PinServiceAddCommentProcedure:
			pinServiceAddCommentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPinServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPinServiceHandler struct{}

func (UnimplementedPinServiceHandler) CreatePin(context.Context, *connect.Request[service.CreatePinRequest]) (*connect.Response[service.CreatePinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.PinService.CreatePin is not implemented"))
}

func (UnimplementedPinServiceHandler) ListPins(context.Context, *connect.Request[service.ListPinsRequest]) (*connect.Response[service.ListPinsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.PinService.ListPins is not implemented"))
}

func (UnimplementedPinServiceHandler) GetPin(context.Context, *connect.Request[service.GetPinRequest]) (*connect.Response[service.GetPinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.PinService.GetPin is not implemented"))
}

func (UnimplementedPinServiceHandler) AddComment(context.Context, *connect.Request[service.AddCommentRequest]) (*connect.Response[service.AddCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.service.PinService.AddComment is not implemented"))
}
