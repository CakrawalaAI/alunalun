syntax = "proto3";

package alunalun.v1.entities;

import "google/protobuf/timestamp.proto";
import "alunalun/v1/common/timestamp.proto";

option go_package = "github.com/ckrwl/alunalun/api/gen/go/alunalun/v1/entities;entities";

// Token represents an authentication token
message Token {
  // The actual token string (JWT or opaque token)
  string access_token = 1;
  
  // Token type (usually "Bearer")
  string token_type = 2;
  
  // Expiration time in seconds from issuance
  int32 expires_in = 3;
  
  // Refresh token for getting new access tokens
  string refresh_token = 4;
  
  // Scopes granted to this token
  repeated string scopes = 5;
  
  // Token ID (for revocation)
  string token_id = 6;
  
  // When the token was issued
  google.protobuf.Timestamp issued_at = 7;
  
  // When the token expires
  google.protobuf.Timestamp expires_at = 8;
}

// Session represents an active user session
message Session {
  // Unique session identifier
  string id = 1;
  
  // User ID this session belongs to
  string user_id = 2;
  
  // Token information
  Token token = 3;
  
  // Session metadata
  SessionMetadata metadata = 4;
  
  // Session status
  SessionStatus status = 5;
  
  // Session timestamps
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp last_accessed_at = 7;
  google.protobuf.Timestamp expires_at = 8;
  
  // Number of times this session has been refreshed
  int32 refresh_count = 9;
}

// SessionMetadata contains session metadata
message SessionMetadata {
  // IP address of the client
  string ip_address = 1;
  
  // User agent string
  string user_agent = 2;
  
  // Device information
  DeviceInfo device = 3;
  
  // Location information (derived from IP)
  SessionLocation location = 4;
  
  // Client application ID
  string client_id = 5;
  
  // Client application version
  string client_version = 6;
}

// DeviceInfo contains device information
message DeviceInfo {
  // Device ID (for mobile apps)
  string device_id = 1;
  
  // Device type
  enum DeviceType {
    DEVICE_TYPE_UNSPECIFIED = 0;
    DEVICE_TYPE_WEB = 1;
    DEVICE_TYPE_MOBILE = 2;
    DEVICE_TYPE_TABLET = 3;
    DEVICE_TYPE_DESKTOP = 4;
    DEVICE_TYPE_TV = 5;
    DEVICE_TYPE_WATCH = 6;
    DEVICE_TYPE_API = 7; // API client
  }
  DeviceType type = 2;
  
  // Operating system
  string os = 3; // e.g., "iOS", "Android", "Windows"
  
  // OS version
  string os_version = 4;
  
  // Browser name (for web)
  string browser = 5;
  
  // Browser version
  string browser_version = 6;
  
  // Device model (for mobile)
  string model = 7; // e.g., "iPhone 14 Pro"
  
  // App version (for mobile apps)
  string app_version = 8;
  
  // Push notification token
  string push_token = 9;
}

// SessionLocation represents the geographic location of a session
message SessionLocation {
  // Country code (ISO 3166-1 alpha-2)
  string country_code = 1;
  
  // Country name
  string country = 2;
  
  // Region/state
  string region = 3;
  
  // City
  string city = 4;
  
  // Latitude
  double latitude = 5;
  
  // Longitude
  double longitude = 6;
  
  // Timezone
  string timezone = 7;
}

// SessionStatus represents the status of a session
enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0;
  SESSION_STATUS_ACTIVE = 1;      // Currently active
  SESSION_STATUS_EXPIRED = 2;     // Expired naturally
  SESSION_STATUS_REVOKED = 3;     // Manually revoked
  SESSION_STATUS_LOGGED_OUT = 4;  // User logged out
  SESSION_STATUS_INVALID = 5;     // Invalid/tampered
}

// AuthProvider represents an authentication provider
enum AuthProvider {
  AUTH_PROVIDER_UNSPECIFIED = 0;
  AUTH_PROVIDER_EMAIL = 1;        // Email/password
  AUTH_PROVIDER_GOOGLE = 2;       // Google OAuth
  AUTH_PROVIDER_FACEBOOK = 3;     // Facebook OAuth
  AUTH_PROVIDER_APPLE = 4;        // Apple Sign In
  AUTH_PROVIDER_GITHUB = 5;       // GitHub OAuth
  AUTH_PROVIDER_TWITTER = 6;      // Twitter OAuth
  AUTH_PROVIDER_PHONE = 7;        // Phone number
  AUTH_PROVIDER_MAGIC_LINK = 8;   // Passwordless email
  AUTH_PROVIDER_SAML = 9;         // SAML SSO
  AUTH_PROVIDER_OIDC = 10;        // OpenID Connect
}

// AuthMethod represents how the user authenticated
message AuthMethod {
  // The provider used
  AuthProvider provider = 1;
  
  // Provider-specific user ID
  string provider_user_id = 2;
  
  // When this method was linked
  google.protobuf.Timestamp linked_at = 3;
  
  // Last time this method was used
  google.protobuf.Timestamp last_used_at = 4;
  
  // Whether this is the primary method
  bool is_primary = 5;
  
  // Provider-specific metadata
  map<string, string> metadata = 6;
}

// LoginCredentials for email/password login
message LoginCredentials {
  // Email or username
  string identifier = 1; // required
  
  // Password
  string password = 2; // required
  
  // Two-factor authentication code (if enabled)
  string totp_code = 3;
  
  // Remember me flag (for longer session)
  bool remember_me = 4;
  
  // Device info for session tracking
  DeviceInfo device = 5;
}

// OAuthCredentials for OAuth login
message OAuthCredentials {
  // OAuth provider
  AuthProvider provider = 1;
  
  // OAuth access token from provider
  string access_token = 2;
  
  // OAuth refresh token from provider
  string refresh_token = 3;
  
  // ID token (for OIDC providers)
  string id_token = 4;
  
  // Authorization code (for code flow)
  string code = 5;
  
  // State parameter (for CSRF protection)
  string state = 6;
  
  // Redirect URI used
  string redirect_uri = 7;
}

// RefreshToken request details
message RefreshTokenRequest {
  // The refresh token
  string refresh_token = 1; // required
  
  // Optional: specific scopes to request
  repeated string scopes = 2;
  
  // Device info for new session
  DeviceInfo device = 3;
}

// PasswordReset represents a password reset request
message PasswordReset {
  // Reset token (sent via email)
  string token = 1;
  
  // User ID
  string user_id = 2;
  
  // Email address
  string email = 3;
  
  // When the reset was requested
  google.protobuf.Timestamp requested_at = 4;
  
  // When the token expires
  google.protobuf.Timestamp expires_at = 5;
  
  // Whether the reset has been used
  bool used = 6;
  
  // When it was used
  google.protobuf.Timestamp used_at = 7;
  
  // IP address of requester
  string request_ip = 8;
  
  // User agent of requester
  string request_user_agent = 9;
}

// TwoFactorAuth represents 2FA settings
message TwoFactorAuth {
  // Whether 2FA is enabled
  bool enabled = 1;
  
  // 2FA method
  enum Method {
    METHOD_UNSPECIFIED = 0;
    METHOD_TOTP = 1;        // Time-based OTP (Google Authenticator)
    METHOD_SMS = 2;         // SMS code
    METHOD_EMAIL = 3;       // Email code
    METHOD_BACKUP_CODES = 4; // Backup codes
  }
  repeated Method methods = 2;
  
  // Primary method
  Method primary_method = 3;
  
  // Backup codes (encrypted)
  repeated string backup_codes = 4;
  
  // When 2FA was enabled
  google.protobuf.Timestamp enabled_at = 5;
  
  // Last time 2FA was used
  google.protobuf.Timestamp last_used_at = 6;
}