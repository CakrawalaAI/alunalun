syntax = "proto3";

package alunalun.v1.common;

option go_package = "github.com/ckrwl/alunalun/api/gen/go/alunalun/v1/common;common";

// ErrorCode defines standard error codes across all services
// These map to gRPC status codes but provide more specific context
enum ErrorCode {
  // Default value - should never be used
  ERROR_CODE_UNSPECIFIED = 0;
  
  // Authentication & Authorization errors (maps to UNAUTHENTICATED/PERMISSION_DENIED)
  ERROR_CODE_UNAUTHENTICATED = 1;        // No valid authentication credentials
  ERROR_CODE_TOKEN_EXPIRED = 2;          // JWT/session token has expired
  ERROR_CODE_TOKEN_INVALID = 3;          // Token is malformed or signature invalid
  ERROR_CODE_PERMISSION_DENIED = 4;      // Authenticated but not authorized
  ERROR_CODE_ACCOUNT_DISABLED = 5;       // User account is disabled/banned
  
  // Validation errors (maps to INVALID_ARGUMENT)
  ERROR_CODE_VALIDATION_FAILED = 10;     // General validation failure
  ERROR_CODE_EMAIL_INVALID = 11;         // Email format is invalid
  ERROR_CODE_PASSWORD_TOO_WEAK = 12;     // Password doesn't meet requirements
  ERROR_CODE_USERNAME_TAKEN = 13;        // Username already exists
  ERROR_CODE_EMAIL_TAKEN = 14;           // Email already registered
  
  // Resource errors (maps to NOT_FOUND/ALREADY_EXISTS)
  ERROR_CODE_NOT_FOUND = 20;             // Resource doesn't exist
  ERROR_CODE_ALREADY_EXISTS = 21;        // Resource already exists
  ERROR_CODE_CONFLICT = 22;              // Resource state conflict
  ERROR_CODE_GONE = 23;                  // Resource permanently deleted
  
  // Rate limiting & quotas (maps to RESOURCE_EXHAUSTED)
  ERROR_CODE_RATE_LIMITED = 30;          // Too many requests
  ERROR_CODE_QUOTA_EXCEEDED = 31;        // Usage quota exceeded
  
  // System errors (maps to INTERNAL/UNAVAILABLE)
  ERROR_CODE_INTERNAL = 40;              // Internal server error
  ERROR_CODE_SERVICE_UNAVAILABLE = 41;   // Service temporarily unavailable
  ERROR_CODE_DATABASE_ERROR = 42;        // Database operation failed
  ERROR_CODE_EXTERNAL_SERVICE = 43;      // External service call failed
}

// ErrorDetail provides additional context for errors
// This can be included in gRPC error details
message ErrorDetail {
  // Error code for programmatic handling
  ErrorCode code = 1;
  
  // Human-readable error message
  // Should be safe to display to end users
  string message = 2;
  
  // Field that caused the error (for validation errors)
  // Example: "email", "password", "username"
  string field = 3;
  
  // Additional metadata as key-value pairs
  // Example: {"retry_after": "60", "max_length": "255"}
  map<string, string> metadata = 4;
  
  // Developer-facing error details (not for end users)
  // Include stack traces, internal error codes, etc.
  string debug_info = 5;
}

// ValidationError represents a validation error for a specific field
message ValidationError {
  // Field name that failed validation
  string field = 1;
  
  // Validation rule that failed
  // Example: "required", "min_length", "pattern"
  string rule = 2;
  
  // Human-readable error message
  string message = 3;
  
  // The invalid value (as string for display)
  // Be careful not to include sensitive data
  string value = 4;
}

// ValidationErrors wraps multiple validation errors
message ValidationErrors {
  repeated ValidationError errors = 1;
}