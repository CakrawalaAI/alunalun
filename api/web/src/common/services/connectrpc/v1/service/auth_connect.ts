// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file v1/service/auth.proto (package api.v1.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AuthenticateRequest, AuthenticateResponse, CheckUsernameRequest, CheckUsernameResponse, InitAnonymousRequest, InitAnonymousResponse, RefreshTokenRequest, RefreshTokenResponse } from "./auth_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * AuthService handles authentication flows
 *
 * @generated from service api.v1.service.AuthService
 */
export const AuthService = {
  typeName: "api.v1.service.AuthService",
  methods: {
    /**
     * Check if username is available
     *
     * @generated from rpc api.v1.service.AuthService.CheckUsername
     */
    checkUsername: {
      name: "CheckUsername",
      I: CheckUsernameRequest,
      O: CheckUsernameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Initialize anonymous session (generates session_id + token)
     *
     * @generated from rpc api.v1.service.AuthService.InitAnonymous
     */
    initAnonymous: {
      name: "InitAnonymous",
      I: InitAnonymousRequest,
      O: InitAnonymousResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Authenticate with provider (Google, magic link, etc)
     *
     * @generated from rpc api.v1.service.AuthService.Authenticate
     */
    authenticate: {
      name: "Authenticate",
      I: AuthenticateRequest,
      O: AuthenticateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Refresh authenticated tokens (anonymous tokens never expire)
     *
     * @generated from rpc api.v1.service.AuthService.RefreshToken
     */
    refreshToken: {
      name: "RefreshToken",
      I: RefreshTokenRequest,
      O: RefreshTokenResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

